<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">

<!--   To enable Annotations we need to write this to enable our @Autowired
        If we don't write it, we get null instead of the value
        ex. Employee Address : Emp(address=null)
        -->
   <context:annotation-config/>

<!--   Bean of Address Class-->
    <bean class="com.spring.autowired.annotation.Address" name="address">
        <property name="city" value="Mumbai" />
        <property name="street" value="Street 22" />
    </bean>

<!--    <bean class="com.spring.autowired.annotation.Address" name="address2">-->
<!--        <property name="city" value="Pune" />-->
<!--        <property name="street" value="Street 12" />-->
<!--    </bean>-->


    <!--    Bean of Emp class *** autowiring using 'constructor'-->
    <bean class="com.spring.autowired.annotation.Emp" name="Emp1" p:empName="Rohit" />

<!--   when we use Autowired annotation then what ever the name of the Address class its doesn't matter
        until its only one bean, But what if there are more bean then we get exception
        'NoUniqueBeanDefinitionException == expected single matching bean but found 2: address,address2

    To solve this problem we use     @Qualifier("beanName") and provide the beanName of the Address class
    so it will inject dependency with 'beanName' on it
         -->


</beans>